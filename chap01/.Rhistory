View(list)
list$사용일자 <- ifelse(ex$사용일자>20200600, ex$사용일자-20200600,ex$사용일자)
View(list)
list$사용일자 <- ifelse(list$사용일자>20200600, list$사용일자-20200600,list$사용일자)
View(list)
plot_ly(list, x=~사용일자, y=~total)
plot_ly(list, x=~사용일자, y=~total) %>% add_lines()
plot_ly(list, x=~사용일자, y=~total) %>% add_paths()
plot_ly(list, x=~사용일자, y=~total) %>% add_lines(linetype=~노선명명)
plot_ly(list, x=~사용일자, y=~total) %>% add_lines(linetype=~노선명)
plot_ly(list, x=~사용일자, y=~total) %>% add_lines(linetype=~노선명)
warning()
plot_ly(list, x=~사용일자, y=~total) %>% add_lines(linetype=~노선명)
warning()
plot_ly(list, x=~사용일자, y=~total) %>% add_lines(linetype=~노선명) %>% warning()
write.csv(file='sample.csv',list)
write.csv(file='./sample.csv',list)
write.csv(file='C:/R/Ch01/sample.csv',list)
write.csv(file='C:/R/chap01/sample.csv',list)
list <- read.csv('./sample.csv')
View(list)
list <- read.csv('C:/R/chap01/sample.csv')
View(list)
plot_ly(list, x=~사용일자, y=~total) %>% add_lines(linetype=~노선명)
# 1호선 ~ 9호선 만 나타내기
library(stringr)
View(list)
(str_detect(노선명,'^9호선'))
View(list)
g <- list %>% filter(str_detect(노선명,'^1호선')|str_detect(노선명,'^2호선')|
str_detect(노선명,'^3호선')|str_detect(노선명,'^4호선')|
str_detect(노선명,'^5호선')|str_detect(노선명,'^6호선')|
str_detect(노선명,'^6호선')|str_detect(노선명,'^8호선')|
str_detect(노선명,'^9호선'))
View(g)
plot_ly(g, x=~사용일자, y=~total) %>% add_lines(linetype=~노선명)
## 히스토그램 - 특정 등급을 빈도로 측정할 경우 주로 사용,
## 일반적으로 Y 축은 빈도
View(diamonds)
plot_ly(diamonds, x=~cut)
plot_ly(diamonds, x=~cut) %>% add_histogram()
## 히스토그램 - 특정 등급을 빈도로 측정할 경우 주로 사용,
## 일반적으로 Y 축은 빈도
View(diamonds)
View(quankes)
View(quakes)
plot_ly(quakes,x=~mag)
plot_ly(quakes,x=~mag) %>% add_histogram()
plot_ly(mpg,x=~drv, y=~hwy)
View(mpg)
list <- mpg %>% group_by(drv) %>% summarise(total=sum(mean(hwy)))
list
plot_ly(list,x=~drv, y=~hwy)
plot_ly(list,x=~drv, y=~total)
scores <- read.csv('c:/R/chap01/data/ch02/csv_exam.csv')
View(scores)
plot_ly(scores, x=~class, y=~math)
plot_ly(scores, x=~class, y=~math) %>% add_bars()
#반별 과목 합계
total <- scores %>% group_by(class) %>% summarise(mat=sum(math), eng=sum(english), sci=sum(science))
plot_ly(total, x=~class, y=~mat) %>% add_bars()
plot_ly(total,x=~class, y=~mat, type='bar') %>%
add_trace(y=~eng) %>%
add_trace(y=~sci)
plot_ly(total,x=~class, y=~mat, type='bar', name='math') %>%
add_trace(y=~eng, name='english') %>%
add_trace(y=~sci, name='science')
plot_ly(total,x=~class, y=~mat, type='bar', name='math') %>%
add_trace(y=~eng, name='english') %>%
add_trace(y=~sci, name='science') %>%
layout(title='scores', xaxis=list(title='반'))
plot_ly(total,x=~class, y=~mat, type='bar', name='math') %>%
add_trace(y=~eng, name='english') %>%
add_trace(y=~sci, name='science') %>%
layout(title='scores', yaxis=list(title='score'))
plot_ly(total,x=~class, y=~mat, type='bar', name='math') %>%
add_trace(y=~eng, name='english') %>%
add_trace(y=~sci, name='science') %>%
layout(title='scores', yaxis=list(title='score'), barmode='stack')
scores %>% group_by(class) %>% summarise(tot=sum(math,english,science))
# `summarise()` ungrouping output (override with `.groups` argument)
scores %>% group_by(class) %>% summarise(tot=sum(math,english,science),.groups='drop')
# `summarise()` ungrouping output (override with `.groups` argument)
total <- scores %>% group_by(class) %>% summarise(tot=sum(math,english,science),.groups='drop')
plot_ly(total,x=~class,y=~tot, type='bar')
plot_ly(total,x=~class,y=~tot, type='bar', color=~class)
# 왼쪽에 쓸데없는 컬러바가 생겨서 없애줌
plot_ly(total,x=~class,y=~tot, type='bar', color=~class) %>% hide_colorbar()
library(plotly)
library(dplyr)
sub <- read.csv('./data/ch02/202006_SUBWAY.csv', stringsAsFactors = F)
table <- sub %>% mutate(총승객수 = 승차총승객수+하차총승객수)
View(table)
list <- table %>% group_by(노선명) %>% summarise(total=sum(총승객수))
View(list)
result <- list %>% arrange(desc(total)) %>% head(10)
View(result)
plot_ly(result, type='pie')
plot_ly(result, x=~노선명, y=~total, type='pie')
plot_ly(result, labels=~노선명, values =~total, type='pie')
library('rvest')
url <- 'https://news.naver.com/main/list.nhn?mode=LSD&mid=sec&sid1=001'
# 만약 한글로 된 사이트일 경우 한글이 깨지거나, 못 불러오면.. encoding을 CP-949로 바꿔줘야 함
html_source <- read_html(url, encoding = "CP-949")
html_source
link <- html_source %>% html_nodes('.type06_headline a') %>% html_attr('href')
link
media <- html_source %>% html_nodes('.writing') %>% html_text()
media
subject <- html_source %>% html_nodes('.type06_headline a') %>% html_text()
subject
# 링크
list <- html_nodes(html_source,"#main_content .type06_headline dt:not(.photo)")
list
#제목 , html_text : 태그 하위 텍스트를 가져옴
# gusb ('대상문자',' 변강내용', '대상 문구') : 문자 치환
title <- html_nodes(list,"a") %>% html_text()
title
title <-gsub('\t','',title)
title
title <-gsub('\r\n','',title)
title
title <-gsub(',','',title)
title
# 미디어
pub <- html_nodes(html_source,"#main_content .type06_headline dd span.writing") %>%
html_text()
pub
View(news)
# write.csv(news,'C:/RR/data/ch01/news.csv')
write.table(news,file = 'C:/RR/data/ch01/news.csv',
append = TRUE, row.names = FALSE, col.names = TRUE,
quote = FALSE, sep = ',')
# 1. url 준비
url <- 'https://tv.naver.com/jtbc.youth'
# 2. html 가져오기
html_source <- read_html(url, encoding = "UTF-8")
html_source
title <- html_source %>% html_nodes('.title a tooltip') %>% html_text()
title
# 링크
list <- html_nodes(html_source,"#main_content .type06_headline dt:not(.photo)")
list
url <- 'https://news.naver.com/main/list.nhn?mode=LSD&mid=sec&sid1=001'
# 만약 한글로 된 사이트일 경우 한글이 깨지거나, 못 불러오면.. encoding을 CP-949로 바꿔줘야 함
html_source <- read_html(url, encoding = "CP-949")
html_source
# 링크
list <- html_nodes(html_source,"#main_content .type06_headline dt:not(.photo)")
list
# html_attr : 특정 속성의 값을 가져온다.
link <- html_nodes(list,"a") %>% html_attr("href")
link
#제목 , html_text : 태그 하위 텍스트를 가져옴
# gusb ('대상문자',' 변강내용', '대상 문구') : 문자 치환
title <- html_nodes(list,"a") %>% html_text()
title
title <-gsub('\t','',title)
title <-gsub('\r\n','',title)
title
title <-gsub(',','',title)
title
install.packages('rvest')
install.packages("rvest")
library('rvest')
url <- 'https://news.naver.com/main/ranking/popularDay.nhn'
html_source <- read_html(url, encoding = "CP-949")
html_source
title <- html_source %>% html_nodes('.thumb')
title
title <- html_source %>% html_nodes('.num1')
title
title <- html_source %>% html_nodes('.num1 dt a')
title
title <- html_source %>% html_nodes('.num1 dt a') %>% html_attr("title")
title
section <- html_source %>% html_nodes('.ranking_section h4')
section
section <- html_source %>% html_nodes('.ranking_section h4') %>% html_attr('class')
section
class(section)
title <- html_source %>% html_nodes('dt') %>% html_attr("title")
title
title <- html_source %>% html_nodes('dt a') %>% html_attr("title")
title
title <-gsub('\',title)
title
title <-gsub('\',title)
title
title <-gsub('/\/',title)
title <-gsub('/\',title)
title
title <-gsub('/\',title)
title
title <-gsub('\"\"',title)
title <-gsub('\\',title)
title
title <-gsub('\\',title)
news <- data.frame(title)
write.csv(news,'C:/R/chap01/news.csv')
section <- html_source %>% html_nodes('.ranking_section h4') %>% html_attr('class') %>% html_text()
section <- html_source %>% html_nodes('.ranking_section h4') %>% html_text()
section
tit <- html_source %>% html_nodes('.ranking_section h4') %>% html_attr('class')
name <- section <- html_source %>% html_nodes('.ranking_section h4') %>% html_text()
section <- c(tit,name)
section
section <- data.frame(tit,name)
section
name <-gsub('\n','',title)
name <- section <- html_source %>% html_nodes('.ranking_section h4') %>% html_text()
name <-gsub('\n','',title)
name
tit <- html_source %>% html_nodes('.ranking_section h4') %>% html_attr('class')
tit
name <- html_source %>% html_nodes('.ranking_section h4') %>% html_text()
name <-gsub('\n','',title)
name <-gsub('\n','',name)
name <- html_source %>% html_nodes('.ranking_section h4') %>% html_text()
name <- gsub('\n','',name)
name
name <- gsub('\n',' ',name)
name
name <- gsub('\r\n','',name)
name
name <- gsub('t','',name)
name
section <- data.frame(tit,name)
section
library(plotly)
library(readxl)
library(dplyr)
excel <- read_excel('./data/ch03/cycle.xlsx',sheet=1)
View(excel)
plot_mapbox(excel)
# https://www.mapbox.com 가입
Sys.setenv('MAPBOX_TOKEN' = 'pk.eyJ1Ijoic2VpbGl1cyIsImEiOiJja2RzZmZmaWwwejJvMnhwYnA1Mm1kZXlkIn0.A8nY74lYX6WyjoSLUPXOsg')
plot_mapbox(excel)
plot_mapbox(excel) %>%
add_markers(
x=~long,
y=~lat
)
plot_mapbox(excel) %>%
add_markers(
x=~long,
y=~lat,
color=area
)
plot_mapbox(excel) %>%
add_markers(
x=~long,
y=~lat,
color=~area
)
plot_mapbox(excel) %>%
add_markers(
x=~long,
y=~lat,
color=~area,
size=~holder
)
plot_mapbox(excel) %>%
add_markers(
x=~long,
y=~lat,
color=~area, # 구별 색상 변경
size=~holder, # 거치대 개수에 따라 점 크기 변경
text =~paste(store_name, '(',holder,'개)')
)
plot_mapbox(excel) %>%
add_markers(
x=~long,
y=~lat,
color=~area, # 구별 색상 변경
size=~holder, # 거치대 개수에 따라 점 크기 변경
text =~paste(store_name, '(',holder,'개)'), # 텍스트 내용
hoverinfo = 'text' #마우스 오버 시 보여줄 내용
)
map <- plot_mapbox(excel) %>%
add_markers(
x=~long,
y=~lat,
color=~area, # 구별 색상 변경
size=~holder, # 거치대 개수에 따라 점 크기 변경
text =~paste(store_name, '(',holder,'개)'), # 텍스트 내용
hoverinfo = 'text' #마우스 오버 시 보여줄 내용
)
# 초기 위치 변경, 줌 변경
map %>% layout(
title = '따릉이 정류소 현황'
mapbox =list(
zoom = 10,
center = list(lon=127,lat=37.5)
)
)
# 초기 위치 변경, 줌 변경
map %>% layout(
title = '따릉이 정류소 현황',
mapbox =list(
zoom = 10,
center = list(lon=127,lat=37.5)
)
)
map
# 초기 위치 변경, 줌 변경
map %>% layout(
title = '따릉이 정류소 현황',
mapbox =list(
zoom = 10,
center = list(lon=127,lat=37.5)
)
)
library(htmlwidgets)
saveWidget(m, './map.html',selfcontained = TRUE)
# 초기 위치 변경, 줌 변경
m <- map %>% layout(
title = '따릉이 정류소 현황',
mapbox =list(
zoom = 10,
center = list(lon=127,lat=37.5)
)
)
saveWidget(m, './map.html',selfcontained = TRUE)
?add_markers
map %>% layout(
title = '따릉이 정류소 현황',
mapbox =list(
zoom = 10,
center = list(lon=127,lat=37.5),
style='satellite'
)
)
# map 스타일을 변경할 수 있다.
# basic, satellite, open-street-map, white-bg, carto-position
# carto-darkmatter, stamen-terrian, staman-toner, stamen-watercolor
map %>% layout(
title = '따릉이 정류소 현황',
mapbox =list(
zoom = 10,
center = list(lon=127,lat=37.5),
style='white-bg'
)
)
# map 스타일을 변경할 수 있다.
# basic, satellite, open-street-map, white-bg, carto-position
# carto-darkmatter, stamen-terrian, staman-toner, stamen-watercolor
map %>% layout(
title = '따릉이 정류소 현황',
mapbox =list(
zoom = 10,
center = list(lon=127,lat=37.5),
style='stamen-terrian'
)
)
ex <- read_excel('/data/ch03/wc.xls')
ex <- read_excel('./data/ch03/wc.xls')
View(ex)
head(ex)
rename(ex, 화장실이름=콘텐츠명 (필수입력력))
rename(ex, 화장실이름=콘텐츠명\n(필수입력))
rename(ex, 화장실이름=콘텐츠명'\n'(필수입력))
head(ex)
ex$`콘텐츠명
(필수 입력)`
ex$`콘텐츠명 (필수 입력)`
ex$`콘텐츠명(필수 입력)`
ex$`콘텐츠명
(필수 입력)`
# 공중 화장실
rename(ex,화장실이름,`콘텐츠명
(필수 입력)`)
# 공중 화장실
rename(ex,화장실이름=`콘텐츠명
(필수 입력)`)
# 공중 화장실
ex <- rename(ex,화장실이름=`콘텐츠명
(필수 입력)`)
View(ex)
ex <- read_excel('./data/ch03/wc.xls')
ex <- rename(ex,지역구=`구명
(선택입력)`)
View(ex)
ex$`구명
(선택입력)`
ex <- rename(ex,지역구=`구명
(선택입력)`)
ex <- rename(ex,화장실위치=`콘텐츠명
(필수 입력)`)
ex <- read_excel('./data/ch03/wc.xls')
ex <- rename(ex,화장실위치=`콘텐츠명
(필수 입력)`)
ex <- rename(ex,화장실위치=`구명
(선택입력)`)
ex <- rename(ex,화장실위치=`구명
(선택입력)`)
ex <- rename(ex,지역구=`구명
(선택입력)`)
ex <- read_excel('./data/ch03/wc.xls')
ex <- rename(ex,화장실위치=`콘텐츠명명
(선택입력)`)
ex <- rename(ex,지역구=`구명
(선택입력)`)
View(ex)
ex <- rename(ex,화장실위치=`콘텐츠명
(선택입력)`)
ex <- rename(ex,화장실위치=`콘텐츠명
(필수수입력)`)
ex <- rename(ex,화장실위치=`콘텐츠명
(필수입력)`)
ex <- rename(ex,화장실위치=`콘텐츠명
(필수 입력)`)
View(ex)
plot_mapbox(ex) %>%
add_markers(
x=~`좌표[X]
(조건부 선택 입력)`,
y=~`좌표[Y]
(조건부 선택 입력)`,
color=~지역구, # 구별 색상 변경
text =~화장실위치
hoverinfo = 'text' #마우스 오버 시 보여줄 내용
)
plot_mapbox(ex) %>%
add_markers(
x=~`좌표[X]
(조건부 선택 입력)`,
y=~`좌표[Y]
(조건부 선택 입력)`,
color=~지역구, # 구별 색상 변경
text =~화장실위치,
hoverinfo = 'text' #마우스 오버 시 보여줄 내용
)
plot_mapbox(ex) %>%
add_markers(
x=~`좌표[X]
(조건부 선택 입력)`,
y=~`좌표[Y]
(조건부 선택 입력)`,
color=~지역구, # 구별 색상 변경
text =~화장실위치,
hoverinfo = 'text' #마우스 오버 시 보여줄 내용
)
data <- ex %>% select('콘텐츠명\n(필수 입력)','구명\n(선택입력)',
'좌표[X]\n(조건부 선택 입력)','좌표[Y]\n(조건부 선택 입력') %>%
rename(name='콘텐츠명\n(필수 입력)', area='구명\n(선택입력)',
lon='좌표[X]\n(조건부 선택 입력)',lat='좌표[Y]\n(조건부 선택 입력')
ex <- read_excel('./data/ch03/wc.xls')
dat <- ex %>% select('콘텐츠명\n(필수 입력)','구명\n(선택입력)',
'좌표[X]\n(조건부 선택 입력)','좌표[Y]\n(조건부 선택 입력') %>%
rename(name='콘텐츠명\n(필수 입력)', area='구명\n(선택입력)',
lon='좌표[X]\n(조건부 선택 입력)',lat='좌표[Y]\n(조건부 선택 입력')
dat <- ex %>% select('콘텐츠명\n(필수 입력)','구명\n(선택입력)',
'좌표[X]\n(조건부 선택 입력)','좌표[Y]\n(조건부 선택 입력)') %>%
rename(name='콘텐츠명\n(필수 입력)', area='구명\n(선택입력)',
lon='좌표[X]\n(조건부 선택 입력)',lat='좌표[Y]\n(조건부 선택 입력)')
data <- dat %>% filter(!is.na(area)) %>% filter(!is.na(lon)) %>% filter(!is.na(lat))
View(data)
plot_mapbox(data) %>%
add_markers(
x=~lon,
y=~lat,
color=~area,
text=~name,
hoverinfo='text'
) %>% layout(mapbox=list(
zoom=10, center=list(lon=127, lat=37.5)
))
install.packages('rserve')
install.packages('rJava')
install.packages('rjdbc')
install.packages('RJDBC')
install.packages('Rserve')
install.packages('DBI')
library(Rserve)
Rserve(aargs = 'RS-encoding utf8')
Rserve(args = 'RS-encoding utf8')
library('rvest')
url <- "https://news.naver.com/main/ranking/popularDay.nhn"
html_source <- read_html(url, encoding = "UTF-8")
html_source <- read_html(url, encoding = "CP-949")
news <- html_source %>% html_node('title')
html_source
news <- html_source %>% html_node('dt title')
news
news <- html_source %>% html_nodes('dt title')
news <- html_source %>% html_nodes('li')
news
news <- html_source %>% html_nodes('li dl dt')
news
news <- html_source %>% html_nodes('li dl dt title')
news
news <- html_source %>% html_nodes('li dl dt a')
news
news <- html_source %>% html_nodes('li dl dt a title')
news
news <- html_source %>% html_nodes('li dl dt a') %>% html_attr('title')
news
title <- gsub(',', ' ', news)
title
class(title)
write.table(title, file = "./news.csv", append = TRUE, col.names = FALSE, row.names = FALSE, quote = FALSE)
write.table(title, file = "./news.csv", append = TRUE, col.names = FALSE, row.names = FALSE, quote = FALSE)
write.table(title, file = "./news.csv", append = TRUE, col.names = FALSE, row.names = FALSE)
write.table(title, file = "./news.csv", append = TRUE, col.names = FALSE, row.names = FALSE)
write.table(title, file = "./news.csv", append = TRUE, col.names = FALSE, row.names = FALSE, quote = FALSE)
news <- html_source %>% html_nodes('a') %>% html_attr('title')
news
news <- html_source %>% html_nodes('li dl dt a') %>% html_attr('title')
news
title <- gsub(',', ' ', news)
title
